// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: product.proto

package protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ProductService service

type ProductService interface {
	GetProdList(ctx context.Context, in *ProdsRequest, opts ...client.CallOption) (*ProdListResponse, error)
}

type productService struct {
	c    client.Client
	name string
}

func NewProductService(name string, c client.Client) ProductService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "protos"
	}
	return &productService{
		c:    c,
		name: name,
	}
}

func (c *productService) GetProdList(ctx context.Context, in *ProdsRequest, opts ...client.CallOption) (*ProdListResponse, error) {
	req := c.c.NewRequest(c.name, "ProductService.GetProdList", in)
	out := new(ProdListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProductService service

type ProductServiceHandler interface {
	GetProdList(context.Context, *ProdsRequest, *ProdListResponse) error
}

func RegisterProductServiceHandler(s server.Server, hdlr ProductServiceHandler, opts ...server.HandlerOption) error {
	type productService interface {
		GetProdList(ctx context.Context, in *ProdsRequest, out *ProdListResponse) error
	}
	type ProductService struct {
		productService
	}
	h := &productServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ProductService{h}, opts...))
}

type productServiceHandler struct {
	ProductServiceHandler
}

func (h *productServiceHandler) GetProdList(ctx context.Context, in *ProdsRequest, out *ProdListResponse) error {
	return h.ProductServiceHandler.GetProdList(ctx, in, out)
}
