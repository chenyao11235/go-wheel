package main

/*什么是里姓替换
子类对象（object of subtype/derived class）能够替换程序（program）中父类对象（object of base/parent class）出现的任何地方，
并且保证原来程序的逻辑行为（behavior）不变及正确性不被破坏。
*/

/*里氏替换和多态的区别
多态和里式替换有点类似，但它们关注的角度是不一样的。多态是面向对象编程的一大特性，
也是面向对象编程语言的一种语法。它是一种代码实现的思路。而里式替换是一种设计原则，是用来指导继承关系中子类该如何设计的，
子类的设计要保证在替换父类的时候，不改变原有程序的逻辑以及不破坏原有程序的正确性。
*/

/* 如何根据里氏替换原则设计子类
子类在设计的时候，要遵守父类的行为约定（或者叫协议）。
父类定义了函数的行为约定，那子类可以改变函数的内部实现逻辑，但不能改变函数原有的行为约定。
这里的行为约定包括：函数声明要实现的功能；对输入、输出、异常的约定；
甚至包括注释中所罗列的任何特殊说明。实际上，定义中父类和子类之间的关系，也可以替换成接口和实现类之间的关系。
*/

func main() {

}
